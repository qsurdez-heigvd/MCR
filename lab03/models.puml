@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0

' Additions

' REMOVE

' ENDSTATIC
class Predator {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ areTherePreysNearby(): void
	+ update(): void
	+ name(): String
	+ getVisionRange(): int
	+ die(): void
}

class Soldier {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

class Scout {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

abstract class AbstractColleague {
	- mediator: Mediator
	# position: Vector2
	- id: int
	- {static} idCounter: int
	+ getMediator(): Mediator
	+ setMediator(newMediator: Mediator): void
	+ getPosition(): Vector2
	+ {abstract}update(): void
	+ getX(): int
	+ getY(): int
	# {abstract}getRenderer(): Renderer
	+ draw(): void
	+ {abstract}name(): String
	+ getSize(): int
	+ toString(): String
}


abstract class Ant {
	- holding: boolean
	+ areThereResourcesNearby(): void
	+ isHolding(): boolean
	+ setHolding(holding: boolean): void
	+ isPredatorNearby(): void
	+ arrivedAtObjective(): void
	+ die(): void
}


class Colony {
	- nbFood: int
	+ update(): void
	# getRenderer(): Renderer
	+ name(): String
	+ getNbFood(): int
	+ incrementFood(): void
	+ decrementFood(nbFoodUsed: int): void
}


class Resource {
	- nbResources: int
	+ update(): void
	# getRenderer(): Renderer
	+ getNbResources(): int
	+ decrementResource(): void
	+ name(): String
}


abstract class Entity {
	- {static} random: Random
	# fleeing: Vector2
	# pv: int
	# exploring: Vector2
	- count: int
	+ {abstract}getStrength(): int
	+ getCount(): int
	+ resetCounter(): void
	+ incrementCounter(): void
	+ flee(predatorPosition: Vector2): void
	+ stopFleeing(): void
	+ isFleeing(): boolean
	+ getFleeing(): Vector2
	+ getExploring(): Vector2
	+ setExploring(newExploring: Vector2): void
	+ getPv(): int
	+ decrementPv(amount: int): void
	+ {abstract}die(): void
	+ move(newPosition: Vector2): void
	+ getRandom(): Random
	+ attack(): void
	+ {abstract}getVisionRange(): int
}


class Gatherer {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

interface Displayable {
	~ draw(): void
	~ update(): void
	~ getX(): int
	~ getY(): int
}


Entity <|-- Predator
Ant <|-- Soldier
Ant <|-- Scout
Displayable <|.. AbstractColleague
Entity <|-- Ant
AbstractColleague <|-- Colony
AbstractColleague <|-- Resource
AbstractColleague <|-- Entity
Ant <|-- Gatherer
@enduml
