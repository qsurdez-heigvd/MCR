@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0

' Additions

' REMOVE

' ENDSTATIC

class AggressiveMediator {
	+ handleResourceFound(resource: Resource): void
	+ handlePredatorFound(predator: Predator): void
	+ handlePredatorDeath(predator: Predator): void
	+ predatorStillNearby(ant: Ant): void
	+ handleUpdateGatherer(gatherer: Gatherer): void
	+ handleUpdateScout(scout: Scout): void
	+ handleUpdateSoldier(soldier: Soldier): void
	+ getRadiusResource(): int
	+ getRadiusToPredator(): int
	+ getRadiusToFlee(): int
	+ getThresholdToCreateAnt(): int
	+ getRadiusPredatorToPrey(): int
	+ stepToSpawnResource(): int
	+ stepToSpawnPredator(): int
	+ handleDeath(): void
}

class BalancedMediator {
	+ handleUpdateGatherer(gatherer: Gatherer): void
	+ handleUpdateSoldier(soldier: Soldier): void
	+ getRadiusResource(): int
	+ getRadiusToPredator(): int
	+ getRadiusToFlee(): int
	+ getThresholdToCreateAnt(): int
	+ getRadiusPredatorToPrey(): int
	+ stepToSpawnResource(): int
	+ stepToSpawnPredator(): int
}


class ExploreMediator {
	+ handleUpdateGatherer(gatherer: Gatherer): void
	+ handleUpdateSoldier(soldier: Soldier): void
	+ addAnt(): void
	+ getRadiusToPredator(): int
	+ getRadiusToFlee(): int
	+ getThresholdToCreateAnt(): int
	+ getRadiusPredatorToPrey(): int
	+ stepToSpawnResource(): int
	+ getRadiusResource(): int
	+ stepToSpawnPredator(): int
}


class Predator {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ areTherePreysNearby(): void
	+ update(): void
	+ name(): String
	+ getVisionRange(): int
	+ die(): void
}

class Soldier {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

class Scout {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

abstract class AbstractColleague {
	# position: Vector2
	- id: int
	- {static} idCounter: int
	+ getMediator(): Mediator
	+ setMediator(newMediator: Mediator): void
	+ getPosition(): Vector2
	+ {abstract}update(): void
	+ getX(): int
	+ getY(): int
	# {abstract}getRenderer(): Renderer
	+ draw(): void
	+ {abstract}name(): String
	+ getSize(): int
	+ toString(): String
}


abstract class Ant {
	- holding: boolean
	+ areThereResourcesNearby(): void
	+ isHolding(): boolean
	+ setHolding(holding: boolean): void
	+ isPredatorNearby(): void
	+ arrivedAtObjective(): void
	+ die(): void
}


class Colony {
	- nbFood: int
	+ update(): void
	# getRenderer(): Renderer
	+ name(): String
	+ getNbFood(): int
	+ incrementFood(): void
	+ decrementFood(nbFoodUsed: int): void
}


class Resource {
	- nbResources: int
	+ update(): void
	# getRenderer(): Renderer
	+ getNbResources(): int
	+ decrementResource(): void
	+ name(): String
}


abstract class Entity {
	- {static} random: Random
	# fleeing: Vector2
	# pv: int
	# exploring: Vector2
	- count: int
	+ {abstract}getStrength(): int
	+ getCount(): int
	+ resetCounter(): void
	+ incrementCounter(): void
	+ flee(predatorPosition: Vector2): void
	+ stopFleeing(): void
	+ isFleeing(): boolean
	+ getFleeing(): Vector2
	+ getExploring(): Vector2
	+ setExploring(newExploring: Vector2): void
	+ getPv(): int
	+ decrementPv(amount: int): void
	+ {abstract}die(): void
	+ move(newPosition: Vector2): void
	+ getRandom(): Random
	+ attack(): void
	+ {abstract}getVisionRange(): int
}


class Gatherer {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

interface Displayable {
	~ draw(): void
	~ update(): void
	~ getX(): int
	~ getY(): int
}


abstract class Mediator {
	# targets: HashMap<Entity,Entity>
	# objectives: HashMap<Entity,AbstractColleague>
	# strategies: HashMap<Entity,MovementStrategy>
	# random: Random
	# stepFromLastResourceSpawn: int
	# stepFromLastPredatorSpawn: int
	- simulationTime: Timer
	# toRemove: LinkedList<AbstractColleague>
	- displayer: SimulationDisplayer
	+ {abstract}handleUpdateGatherer(gatherer: Gatherer): void
	+ {abstract}getRadiusResource(): int
	+ {abstract}getRadiusToPredator(): int
	+ {abstract}getRadiusToFlee(): int
	+ {abstract}getThresholdToCreateAnt(): int
	+ {abstract}getRadiusPredatorToPrey(): int
	+ {abstract}stepToSpawnPredator(): int
	+ {abstract}handleUpdateSoldier(soldier: Soldier): void
	+ handleUpdatePredator(predator: Predator): void
	+ handleUpdateScout(scout: Scout): void
	+ getNbScouts(): int
	+ getNbGatherers(): int
	+ getNbSoldiers(): int
	+ getNbPredators(): int
	+ getTarget(entity: Entity): Entity
	+ checkForNearbyResources(scout: Ant): void
	+ handleResourceFound(resource: Resource): void
	+ checkForNearbyPredators(ant: Ant): void
	+ handlePredatorFound(predator: Predator): void
	+ predatorStillNearby(ant: Ant): void
	+ handleObjectiveReached(ant: Ant): void
	+ countNbTimesColleagueInObjectivesHashMap(\n\t abstractColleague: AbstractColleague): int
	+ nextTurn(): void
	+ addAnt(): void
	+ checkForNearbyPreys(predator: Predator): void
	+ handleResourceDepleted(resource: Resource): void
	+ handleAntDeath(ant: Ant): void
	+ handlePredatorDeath(predator: Predator): void
	+ withinRange(from: AbstractColleague, to: AbstractColleague, range: int): boolean
	+ entityAttacked(entity: Entity): void
	+ display(): void
	+ getAnts(): List<Ant>
	+ checkCollision(newPosition: Vector2, entity: AbstractColleague): boolean
	+ {abstract}stepToSpawnResource(): int
	+ spawnResource(): void
	+ spawnPredator(): void
	+ handleDeath(): void
	+ getObjective(entity: Entity): AbstractColleague
	+ finish(): void
}

'Entity <|-- Predator
'Ant <|-- Soldier
'Ant <|-- Scout
'Displayable <|.. AbstractColleague
'Entity <|-- Ant
'AbstractColleague <|-- Colony
'AbstractColleague <|-- Resource
'AbstractColleague <|-- Entity
'Ant <|-- Gatherer
'Mediator <|-- AggressiveMediator
'Mediator <|-- BalancedMediator
'Mediator <|-- ExploreMediator

'associations
'Mediator "1" --> "1" Colony : hub
'AbstractColleague "*" --> "1" Mediator : has as mediator
'Gatherer "*" <-- "1" Mediator : list of gatherers
'Scout "*" <-- "1" Mediator : list of scouts
'Soldier "*" <-- "1" Mediator : list of soldier
'Predator "*" <-- "1" Mediator : list of predator
'Resource "*" <-- "1" Mediator : list of resource
'Predator "*" <-- "1" Mediator : list of predatorFound
'Resource "*" <-- "1" Mediator : list of resourceFound




@enduml