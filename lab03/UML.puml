@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0

' Additions

' REMOVE

' ENDSTATIC

class Predator {
	# getRenderer(): Renderer
	+ defaultAction(): void
	+ getShape(): Shape
	+ update(): void
}

interface Displayable {
	~ draw(): void
	~ update(): void
	~ getShape(): Shape
	~ getX(): int
	~ getY(): int
}

class GathererRenderer {
	- {static} sprite: Sprite
	+ display(g: Graphics2D, d: Displayable): void
	+ {static} getInstance(): GathererRenderer
}


class GathererRenderer$Instance {
	~ {static} instance: GathererRenderer
}

class Colony {
	~ nbFood: int
	+ update(): void
	# getRenderer(): Renderer
	+ getNbFood(): int
	+ getShape(): Shape
}


class Gatherer {
	- fleeing: Vector2
	- holding: boolean
	# getRenderer(): Renderer
	+ isHolding(): boolean
	+ setHolding(holding: boolean): void
	+ defaultAction(): void
	+ update(): void
	+ flee(predatorPosition: Vector2): void
	+ stopFleeing(): void
	+ getShape(): Shape
	+ holdingResource(): void
}


class ResourceRenderer {
	+ display(g: Graphics2D, d: Displayable): void
	+ {static} getInstance(): ResourceRenderer
	+ {static} printCenteredString(g: Graphics, s: String, width: int, xPos: int, yPos: int): void
}

class ResourceRenderer$Instance {
	~ {static} instance: ResourceRenderer
}

interface Fleeable {
	~ flee(predatorPosition: Vector2): void
	~ stopFleeing(): void
}

interface Targetable {
}
class SpiderRenderer {
	- {static} sprite: Sprite
	+ {static} getInstance(): SpiderRenderer
	+ display(g: Graphics2D, d: Displayable): void
}


class SpiderRenderer$Instance {
	~ {static} instance: SpiderRenderer
}

class Resource {
	- nbResources: int
	+ update(): void
	# getRenderer(): Renderer
	+ getShape(): Shape
	+ getNbResources(): int
}


interface Displayer {
	~ getWidth(): int
	~ getHeight(): int
	~ getGraphics(): Graphics2D
	~ repaint(): void
	~ setTitle(title: String): void
}

abstract class Mediator {
	- displayer: SimulationDisplayer
	# gatherers: LinkedList<Gatherer>
	# soldiers: LinkedList<Soldier>
	# scouts: LinkedList<Scout>
	# resources: LinkedList<Resource>
	# predators: LinkedList<Predator>
	# hub: Colony
	# objectives: HashMap<AbstractColleague,Vector2>
	+ {abstract}checkForNearbyResources(scout: Scout): void
	+ {abstract}handleResourceFound(positionResource: Vector2): void
	+ {abstract}checkForNearbyPredators(ant: Ant): void
	+ {abstract}handlePredatorFound(positionPredator: Vector2): void
	+ {abstract}predatorStillNearby(fleeing: Fleeable): void
	+ {abstract}handleHoldingResource(gatherer: Gatherer): void
	+ {abstract}handleObjectiveReached(entity: Entity): void
	+ {abstract}nextTurn(): void
	+ {abstract}addAnt(): void
	+ display(): void
}


class Vector2 {
	- x: int
	- y: int
	~ {static} random: Random
	+ add(v: Vector2): Vector2
	+ getX(): int
	+ getY(): int
	+ getDirection(from: Vector2, to: Vector2): Vector2
	+ dist(v: Vector2): int
	+ opposite(): Vector2
	+ sub(v: Vector2): Vector2
	+ {static} getRandomNonNullVector(): Vector2
}


enum POSSIBLE_DIRECTIONS {
	+ UP:
	+ DOWN:
	+ RIGHT:
	+ LEFT:
	+ UP_LEFT:
	+ UP_RIGHT:
	+ DOWN_LEFT:
	+ DOWN_RIGHT:
	- direction: Vector2
	+ getDirection(): Vector2
}


class ConcreteMediator {
	~ {static} RADIUS_TO_FIND_RESOURCE: int
	~ {static} RADIUS_ANT_TO_FIND_PREDATOR: int
	~ {static} RADIUS_ANT_TO_FLEE: int
	~ {static} THRESHOLD_TO_CREATE_ANT: int
	~ {static} THRESHOLD_RESOURCES: int
	+ checkForNearbyResources(scout: Scout): void
	+ checkForNearbyPredators(ant: Ant): void
	+ handleResourceFound(positionResource: Vector2): void
	+ handlePredatorFound(predatorPosition: Vector2): void
	+ handleHoldingResource(gatherer: Gatherer): void
	+ predatorStillNearby(ant: Fleeable): void
	+ addAnt(): void
	+ nextTurn(): void
	+ handleObjectiveReached(entity: Entity): void
}


class SoldierRenderer {
	- {static} sprite: Sprite
	+ {static} getInstance(): SoldierRenderer
	+ display(g: Graphics2D, d: Displayable): void
}


class SoldierRenderer$Instance {
	~ {static} instance: SoldierRenderer
}

abstract class AbstractColleague {
	- mediator: Mediator
	# position: Vector2
	+ getMediator(): Mediator
	+ getPosition(): Vector2
	# getDirection(from: Vector2, to: Vector2): Vector2
	+ {abstract}update(): void
	+ getX(): int
	+ getY(): int
	# {abstract}getRenderer(): Renderer
	+ draw(): void
}


abstract class Ant {
	+ isPredatorNearby(): void
	+ hasFoundPredator(predatorPosition: Vector2): void
}

class ColonyRenderer {
	+ display(g: Graphics2D, d: Displayable): void
	+ {static} getInstance(): ColonyRenderer
}

class ColonyRenderer$Instance {
	~ {static} instance: ColonyRenderer
}

abstract class Worker {
}
class ScoutRenderer {
	- {static} sprite: Sprite
	+ display(g: Graphics2D, d: Displayable): void
	+ {static} getInstance(): ScoutRenderer
}


class ScoutRenderer$Instance {
	~ {static} instance: ScoutRenderer
}

class Simulation {
	- mediator: Mediator
	+ run(): void
	+ {static} main(args: String[]): void
}


interface Renderer {
	~ {static} ANT_SPRITE_SIZE: int
	~ {static} SPIDER_SPRITE_SIZE: int
	+ display(g: Graphics2D, d: Displayable): void
}


class Soldier {
	# getRenderer(): Renderer
	+ defaultAction(): void
	+ hasFoundPredator(predatorPosition: Vector2): void
	+ getShape(): Shape
	+ update(): void
}

class Scout {
	~ fleeing: Vector2
	~ exploring: Vector2
	~ count: int
	+ areThereResourcesNearby(): void
	+ hasFoundResource(positionOfResource: Vector2): void
	+ defaultAction(): void
	# getRenderer(): Renderer
	+ getShape(): Shape
	+ flee(predatorPosition: Vector2): void
	+ stopFleeing(): void
	+ update(): void
}


class Sprite {
	- image: Image
	+ getImage(): Image
}


class SimulationDisplayer {
	+ {static} INITIAL_WIDTH: int
	+ {static} INITIAL_HEIGHT: int
	- jFrame: JFrame
	- image: Image
	- backgroundImage: Image
	- {static} makeImageTranslucent(image: Image, alpha: float): Image
	+ getWidth(): int
	+ getHeight(): int
	+ getGraphics(): Graphics2D
	+ repaint(): void
	+ setTitle(title: String): void
	+ {static} getInstance(): SimulationDisplayer
}


class SimulationDisplayer$Instance {
	~ {static} instance: SimulationDisplayer
}

abstract class Entity {
	- {static} random: Random
	# objective: Vector2
	- pv: int
	+ getPv(): int
	+ goToObjective(): void
	+ {abstract}defaultAction(): void
	+ getObjective(): Vector2
	+ setObjective(objective: Vector2): void
	+ move(newPosition: Vector2): void
	+ {abstract}update(): void
	+ getRandom(): Random
}




Entity <|-- Predator
Renderer <|.. GathererRenderer
GathererRenderer +-- GathererRenderer$Instance
AbstractColleague <|-- Colony
Fleeable <|.. Gatherer
Worker <|-- Gatherer
Renderer <|.. ResourceRenderer
ResourceRenderer +-- ResourceRenderer$Instance
Renderer <|.. SpiderRenderer
SpiderRenderer +-- SpiderRenderer$Instance
AbstractColleague <|-- Resource
Mediator <|-- ConcreteMediator
Renderer <|.. SoldierRenderer
SoldierRenderer +-- SoldierRenderer$Instance
Displayable <|.. AbstractColleague
Entity <|-- Ant
Renderer <|.. ColonyRenderer
ColonyRenderer +-- ColonyRenderer$Instance
Ant <|-- Worker
Renderer <|.. ScoutRenderer
ScoutRenderer +-- ScoutRenderer$Instance
Worker <|-- Soldier
Fleeable <|.. Scout
Ant <|-- Scout
JFrame <|-- Sprite
Displayer <|.. SimulationDisplayer
SimulationDisplayer +-- SimulationDisplayer$Instance
AbstractColleague <|-- Entity
@enduml
