@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0

' Additions

' REMOVE

' ENDSTATIC
class Predator {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ areTherePreysNearby(): void
	+ update(): void
	+ name(): String
	+ getVisionRange(): int
	+ die(): void
}

class SettingsSelectorPanel {
	- gathererField: JTextField
	- scoutField: JTextField
	- soldierField: JTextField
	+ getGathererCount(): int
	+ getScoutCount(): int
	+ getSoldierCount(): int
	- addLabelAndField(labelText: String, textField: JTextField): void
}


interface Displayable {
	~ draw(): void
	~ update(): void
	~ getX(): int
	~ getY(): int
}

class GathererRenderer {
	- {static} sprite: Sprite
	+ display(g: Graphics2D, d: Displayable): void
	+ getSize(): int
	+ {static} getInstance(): GathererRenderer
}


class GathererRenderer$Instance {
	~ {static} instance: GathererRenderer
}

class IdleStrategy {
	+ executeStrategy(): void
}

class Colony {
	- nbFood: int
	+ update(): void
	# getRenderer(): Renderer
	+ name(): String
	+ getNbFood(): int
	+ incrementFood(): void
	+ decrementFood(nbFoodUsed: int): void
}


interface MovementStrategy {
	~ executeStrategy(): void
}

class FleeingStrategy {
	- ant: Ant
	+ executeStrategy(): void
}


class BalancedMediator {
	+ handleUpdateGatherer(gatherer: Gatherer): void
	+ handleUpdateSoldier(soldier: Soldier): void
	+ getRadiusResource(): int
	+ getRadiusToPredator(): int
	+ getRadiusToFlee(): int
	+ getThresholdToCreateAnt(): int
	+ getRadiusPredatorToPrey(): int
	+ stepToSpawnResource(): int
	+ stepToSpawnPredator(): int
}

class Gatherer {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

class ResourceRenderer {
	+ display(g: Graphics2D, d: Displayable): void
	+ getSize(): int
	+ {static} getInstance(): ResourceRenderer
}

class ResourceRenderer$Instance {
	~ {static} instance: ResourceRenderer
}

class ObjectiveResourceStrategy {
	+ getRange(): int
}

class SpiderRenderer {
	- {static} sprite: Sprite
	+ display(g: Graphics2D, d: Displayable): void
	+ getSize(): int
	+ {static} getInstance(): SpiderRenderer
}


class SpiderRenderer$Instance {
	~ {static} instance: SpiderRenderer
}

class Resource {
	- nbResources: int
	+ update(): void
	# getRenderer(): Renderer
	+ getNbResources(): int
	+ decrementResource(): void
	+ name(): String
}


interface Displayer {
	~ getWidth(): int
	~ getHeight(): int
	~ getGraphics(): Graphics2D
	~ repaint(): void
	~ setTitle(title: String): void
}

class ObjectiveHomeStrategy {
	+ getRange(): int
}

abstract class Mediator {
	# targets: HashMap<Entity,Entity>
	# objectives: HashMap<Entity,AbstractColleague>
	# strategies: HashMap<Entity,MovementStrategy>
	# gatherers: LinkedList<Gatherer>
	# soldiers: LinkedList<Soldier>
	# scouts: LinkedList<Scout>
	# resources: LinkedList<Resource>
	# predators: LinkedList<Predator>
	# resourcesFound: LinkedList<Resource>
	# predatorsFound: LinkedList<Predator>
	# hub: Colony
	# random: Random
	# stepFromLastResourceSpawn: int
	# stepFromLastPredatorSpawn: int
	- simulationTime: Timer
	# toRemove: LinkedList<AbstractColleague>
	- displayer: SimulationDisplayer
	+ {abstract}handleUpdateGatherer(gatherer: Gatherer): void
	+ {abstract}getRadiusResource(): int
	+ {abstract}getRadiusToPredator(): int
	+ {abstract}getRadiusToFlee(): int
	+ {abstract}getThresholdToCreateAnt(): int
	+ {abstract}getRadiusPredatorToPrey(): int
	+ {abstract}stepToSpawnPredator(): int
	+ {abstract}handleUpdateSoldier(soldier: Soldier): void
	+ handleUpdatePredator(predator: Predator): void
	+ handleUpdateScout(scout: Scout): void
	+ getNbScouts(): int
	+ getNbGatherers(): int
	+ getNbSoldiers(): int
	+ getNbPredators(): int
	+ getTarget(entity: Entity): Entity
	+ checkForNearbyResources(scout: Ant): void
	+ handleResourceFound(resource: Resource): void
	+ checkForNearbyPredators(ant: Ant): void
	+ handlePredatorFound(predator: Predator): void
	+ predatorStillNearby(ant: Ant): void
	+ handleObjectiveReached(ant: Ant): void
	+ countNbTimesColleagueInObjectivesHashMap(\n\t abstractColleague: AbstractColleague): int
	+ nextTurn(): void
	+ addAnt(): void
	+ checkForNearbyPreys(predator: Predator): void
	+ handleResourceDepleted(resource: Resource): void
	+ handleAntDeath(ant: Ant): void
	+ handlePredatorDeath(predator: Predator): void
	+ withinRange(from: AbstractColleague, to: AbstractColleague, range: int): boolean
	+ entityAttacked(entity: Entity): void
	+ display(): void
	+ getAnts(): List<Ant>
	+ checkCollision(newPosition: Vector2, entity: AbstractColleague): boolean
	+ {abstract}stepToSpawnResource(): int
	+ spawnResource(): void
	+ spawnPredator(): void
	+ handleDeath(): void
	+ getObjective(entity: Entity): AbstractColleague
	+ finish(): void
}


class Vector2 {
	+ {static} random: Random
	- x: int
	- y: int
	+ {static} getDirection(from: Vector2, to: Vector2): Vector2
	+ {static} isWithinRange(from: Vector2, to: Vector2, range: int): boolean
	+ {static} getRandomNonNullVector(): Vector2
	+ add(v: Vector2): Vector2
	+ getX(): int
	+ getY(): int
	+ dist(v: Vector2): double
	+ toString(): String
	+ {static} getOrthogonalDirection(collisionDirection: Vector2): Vector2
	+ {static} isColliding(previousPos: Vector2, newPos: Vector2, otherPos: Vector2, \n\t radiusFirst: double, radiusSecond: double): boolean
	+ {static} outOfBounds(previousPos: Vector2, newPosition: Vector2, \n\t entityRadius: double, mapWidth: int, mapHeight: int): boolean
	+ {static} minToBound(position: Vector2, entityRadius: double, mapWidth: int, \n\t mapHeight: int): double
}


enum POSSIBLE_DIRECTIONS {
	+ UP:
	+ DOWN:
	+ LEFT:
	+ RIGHT:
	+ UP_LEFT:
	+ UP_RIGHT:
	+ DOWN_LEFT:
	+ DOWN_RIGHT:
	- vector: Vector2
	+ getDirection(): Vector2
}


class SoldierRenderer {
	- {static} sprite: Sprite
	+ display(g: Graphics2D, d: Displayable): void
	+ getSize(): int
	+ {static} getInstance(): SoldierRenderer
}


class SoldierRenderer$Instance {
	~ {static} instance: SoldierRenderer
}

abstract class AbstractColleague {
	- mediator: Mediator
	# position: Vector2
	- id: int
	- {static} idCounter: int
	+ getMediator(): Mediator
	+ setMediator(newMediator: Mediator): void
	+ getPosition(): Vector2
	+ {abstract}update(): void
	+ getX(): int
	+ getY(): int
	# {abstract}getRenderer(): Renderer
	+ draw(): void
	+ {abstract}name(): String
	+ getSize(): int
	+ toString(): String
}


abstract class ObjectiveStrategy {
	# ant: Ant
	+ {abstract}getRange(): int
	+ executeStrategy(): void
}


abstract class Ant {
	- holding: boolean
	+ areThereResourcesNearby(): void
	+ isHolding(): boolean
	+ setHolding(holding: boolean): void
	+ isPredatorNearby(): void
	+ arrivedAtObjective(): void
	+ die(): void
}


class ColonyRenderer {
	+ display(g: Graphics2D, d: Displayable): void
	+ getSize(): int
	+ {static} getInstance(): ColonyRenderer
}

class ColonyRenderer$Instance {
	~ {static} instance: ColonyRenderer
}

class AggressiveMediator {
	+ handleResourceFound(resource: Resource): void
	+ handlePredatorFound(predator: Predator): void
	+ handlePredatorDeath(predator: Predator): void
	+ predatorStillNearby(ant: Ant): void
	+ handleUpdateGatherer(gatherer: Gatherer): void
	+ handleUpdateScout(scout: Scout): void
	+ handleUpdateSoldier(soldier: Soldier): void
	+ getRadiusResource(): int
	+ getRadiusToPredator(): int
	+ getRadiusToFlee(): int
	+ getThresholdToCreateAnt(): int
	+ getRadiusPredatorToPrey(): int
	+ stepToSpawnResource(): int
	+ stepToSpawnPredator(): int
	+ handleDeath(): void
}

class ScoutRenderer {
	- {static} sprite: Sprite
	+ display(g: Graphics2D, d: Displayable): void
	+ getSize(): int
	+ {static} getInstance(): ScoutRenderer
}


class ScoutRenderer$Instance {
	~ {static} instance: ScoutRenderer
}

class ControlPanel {
	- colorBlindModeButton: JButton
}

class InformationFrame {
	- scoutsLabel: JLabel
	- soldiersLabel: JLabel
	- gatherersLabel: JLabel
	- predatorsLabel: JLabel
	- createAndSetupLabel(): JLabel
	- updateLabels(): void
	+ display(): void
}


class Simulation {
	- colorblindMode: boolean
	- done: boolean
	- mediator: Mediator
	- nbScouts: int
	- nbSoldiers: int
	- nbGatherer: int
	+ initMediator(): void
	+ isColorblindMode(): boolean
	+ switchColorBlindMode(): void
	+ setNbScouts(nbScouts: int): void
	+ setNbSoldiers(nbSoldiers: int): void
	+ setNbGatherer(nbGatherer: int): void
	+ setDone(): void
	+ getNumberOfScouts(): int
	+ getNumberOfSoldiers(): int
	+ getNumberOfGatherers(): int
	+ getNumberOfPredators(): int
	+ run(): void
	+ setMediatorToAggressive(): void
	+ setMediatorToExplore(): void
	+ setMediatorToBalanced(): void
	+ {static} getInstance(): Simulation
	+ {static} main(args: String[]): void
}


class Simulation$Instance {
	~ {static} instance: Simulation
}

interface Renderer {
	~ {static} ANT_SPRITE_SIZE: int
	~ {static} SPIDER_SPRITE_SIZE: int
	~ {static} COLONY_SIZE: int
	~ {static} RESOURCE_SIZE: int
	~ {static} FONT_SIZE: int
	~ display(g: Graphics2D, d: Displayable): void
	~ getCenteredOvalPosition(x: int, y: int, ovalWidth: int, ovalHeight: int): Vector2
	~ printCenteredText(g: Graphics2D, text: String, x: int, y: int): void
	~ getSize(): int
}


class Soldier {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

class Scout {
	+ getStrength(): int
	# getRenderer(): Renderer
	+ update(): void
	+ getVisionRange(): int
	+ name(): String
}

class Sprite {
	- image: Image
	- width: int
	- height: int
	+ getImage(): Image
	+ getWidth(): int
	+ getHeight(): int
}


class PredatorStrategy {
	- predator: Predator
	+ executeStrategy(): void
}


class AttackStrategy {
	- entity: Entity
	+ executeStrategy(): void
}


class TitleScreenPanel {
	- backgroundImage: Image
	- image: Image
	- settingsSelectorPanel: SettingsSelectorPanel
	- getTitleLabel(): JLabel
	- getStartButton(jFrame: JFrame, simulationPanel: JPanel, \n\t controlPanel: JPanel): JButton
	# paintComponent(g: Graphics): void
}


class SimulationDisplayer {
	+ {static} INITIAL_WIDTH: int
	+ {static} INITIAL_HEIGHT: int
	- jFrame: JFrame
	- image: Image
	- backgroundImage: Image
	- {static} makeImageTranslucent(image: Image, alpha: float): Image
	+ {static} getInstance(): SimulationDisplayer
	+ getWidth(): int
	+ getHeight(): int
	+ getGraphics(): Graphics2D
	+ repaint(): void
	+ setTitle(title: String): void
}


class SimulationDisplayer$Instance {
	~ {static} instance: SimulationDisplayer
}

abstract class Entity {
	- {static} random: Random
	# fleeing: Vector2
	# pv: int
	# exploring: Vector2
	- count: int
	+ {abstract}getStrength(): int
	+ getCount(): int
	+ resetCounter(): void
	+ incrementCounter(): void
	+ flee(predatorPosition: Vector2): void
	+ stopFleeing(): void
	+ isFleeing(): boolean
	+ getFleeing(): Vector2
	+ getExploring(): Vector2
	+ setExploring(newExploring: Vector2): void
	+ getPv(): int
	+ decrementPv(amount: int): void
	+ {abstract}die(): void
	+ move(newPosition: Vector2): void
	+ getRandom(): Random
	+ attack(): void
	+ {abstract}getVisionRange(): int
}


class ExploreMediator {
	+ handleUpdateGatherer(gatherer: Gatherer): void
	+ handleUpdateSoldier(soldier: Soldier): void
	+ addAnt(): void
	+ getRadiusToPredator(): int
	+ getRadiusToFlee(): int
	+ getThresholdToCreateAnt(): int
	+ getRadiusPredatorToPrey(): int
	+ stepToSpawnResource(): int
	+ getRadiusResource(): int
	+ stepToSpawnPredator(): int
}

class ScoutingStrategy {
	- ant: Ant
	+ executeStrategy(): void
}




'Entity <|-- Predator
'JPanel <|-- SettingsSelectorPanel
'Renderer <|.. GathererRenderer
'GathererRenderer +-- GathererRenderer$Instance
'MovementStrategy <|.. IdleStrategy
'AbstractColleague <|-- Colony
'MovementStrategy <|.. FleeingStrategy
'Mediator <|-- BalancedMediator
'Ant <|-- Gatherer
'Renderer <|.. ResourceRenderer
'ResourceRenderer +-- ResourceRenderer$Instance
'ObjectiveStrategy <|-- ObjectiveResourceStrategy
'Renderer <|.. SpiderRenderer
'SpiderRenderer +-- SpiderRenderer$Instance
'AbstractColleague <|-- Resource
'ObjectiveStrategy <|-- ObjectiveHomeStrategy
'Renderer <|.. SoldierRenderer
'SoldierRenderer +-- SoldierRenderer$Instance
'Displayable <|.. AbstractColleague
'MovementStrategy <|.. ObjectiveStrategy
'Entity <|-- Ant
'Renderer <|.. ColonyRenderer
'ColonyRenderer +-- ColonyRenderer$Instance
'Mediator <|-- AggressiveMediator
'Renderer <|.. ScoutRenderer
'ScoutRenderer +-- ScoutRenderer$Instance
'JPanel <|-- ControlPanel
'JFrame <|-- InformationFrame
'Simulation +-- Simulation$Instance
'Ant <|-- Soldier
'Ant <|-- Scout
'JFrame <|-- Sprite
'MovementStrategy <|.. PredatorStrategy
'MovementStrategy <|.. AttackStrategy
'JPanel <|-- TitleScreenPanel
'Displayer <|.. SimulationDisplayer
'SimulationDisplayer +-- SimulationDisplayer$Instance
'AbstractColleague <|-- Entity
'Mediator <|-- ExploreMediator
'MovementStrategy <|.. ScoutingStrategy

AbstractColleague          -[#008200,dashed]-^  Displayable
AbstractColleague         "1" *-[#595959,plain]-> "mediator\n1" Mediator
AbstractColleague         "1" *-[#595959,plain]-> "position\n1" Vector2
AggressiveMediator         -[#000082,plain]-^  Mediator
Ant                        -[#000082,plain]-^  Entity
AttackStrategy            "1" *-[#595959,plain]-> "entity\n1" Entity
AttackStrategy             -[#008200,dashed]-^  MovementStrategy
BalancedMediator           -[#000082,plain]-^  Mediator
Colony                     -[#000082,plain]-^  AbstractColleague
ColonyRenderer             -[#008200,dashed]-^  Renderer
Entity                     -[#000082,plain]-^  AbstractColleague
Entity                    "1" *-[#595959,plain]-> "strategy\n1" MovementStrategy
Entity                    "1" *-[#595959,plain]-> "fleeing\n1" Vector2
ExploreMediator            -[#000082,plain]-^  Mediator
FleeingStrategy           "1" *-[#595959,plain]-> "ant\n1" Ant
FleeingStrategy            -[#008200,dashed]-^  MovementStrategy
Gatherer                   -[#000082,plain]-^  Ant
GathererRenderer           -[#008200,dashed]-^  Renderer
GathererRenderer          "1" *-[#595959,plain]-> "sprite\n1" Sprite
IdleStrategy               -[#008200,dashed]-^  MovementStrategy
Mediator                  "1" *-[#595959,plain]-> "objectives\n*" AbstractColleague
Mediator                  "1" *-[#595959,plain]-> "hub\n1" Colony
Mediator                  "1" *-[#595959,plain]-> "targets\n*" Entity
Mediator                  "1" *-[#595959,plain]-> "gatherers\n*" Gatherer
Mediator                  "1" *-[#595959,plain]-> "predators\n*" Predator
Mediator                  "1" *-[#595959,plain]-> "resources\n*" Resource
Mediator                  "1" *-[#595959,plain]-> "scouts\n*" Scout
Mediator                  "1" *-[#595959,plain]-> "displayer\n1" SimulationDisplayer
Mediator                  "1" *-[#595959,plain]-> "soldiers\n*" Soldier
ObjectiveHomeStrategy      -[#000082,plain]-^  ObjectiveStrategy
ObjectiveResourceStrategy  -[#000082,plain]-^  ObjectiveStrategy
ObjectiveStrategy         "1" *-[#595959,plain]-> "ant\n1" Ant
ObjectiveStrategy          -[#008200,dashed]-^  MovementStrategy
Predator                   -[#000082,plain]-^  Entity
PredatorStrategy           -[#008200,dashed]-^  MovementStrategy
PredatorStrategy          "1" *-[#595959,plain]-> "predator\n1" Predator
Resource                   -[#000082,plain]-^  AbstractColleague
ResourceRenderer           -[#008200,dashed]-^  Renderer
Scout                      -[#000082,plain]-^  Ant
ScoutRenderer              -[#008200,dashed]-^  Renderer
ScoutRenderer             "1" *-[#595959,plain]-> "sprite\n1" Sprite
ScoutingStrategy          "1" *-[#595959,plain]-> "ant\n1" Ant
ScoutingStrategy           -[#008200,dashed]-^  MovementStrategy
Simulation                "1" *-[#595959,plain]-> "mediator\n1" Mediator
SimulationDisplayer        -[#008200,dashed]-^  Displayer
Soldier                    -[#000082,plain]-^  Ant
SoldierRenderer            -[#008200,dashed]-^  Renderer
SoldierRenderer           "1" *-[#595959,plain]-> "sprite\n1" Sprite
SpiderRenderer             -[#008200,dashed]-^  Renderer
SpiderRenderer            "1" *-[#595959,plain]-> "sprite\n1" Sprite
TitleScreenPanel          "1" *-[#595959,plain]-> "settingsSelectorPanel\n1" SettingsSelectorPanel


@enduml
